{"version":3,"sources":["path.js"],"names":[],"mappings":";;;;;;;;;;;;sBAAc,QAAQ;;;;oBACL,MAAM;;;;;;;;;;IAOjB,IAAI;AACG,WADP,IAAI,CACI,IAAI,EAAE;0BADd,IAAI;;;;AAIJ,QAAI,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;GAC7C;;;;;;;;eALC,IAAI;;WAWA,kBAAC,GAAG,EAAE;AACV,SAAG,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;;AAE1C,aAAO,oBAAE,QAAQ,CAAC,kBAAK,SAAS,EAAE,GAAG,CAAC,CAAC;KACxC;;;;;;;;;WAMI,iBAAC,IAAI,EAAE;AACV,UAAI,GAAG,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACrD,UAAI,QAAQ,GAAG,EAAE;UACf,MAAM,GAAG,EAAE,CAAC;AACd,UAAI,OAAO,GAAG,mCAAmC,CAAC;AAClD,UAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;;;AAGnB,YAAI,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE;AAClB,gBAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACtB,MAAM;;;AAGL,cAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;SACnD;OACF,MAAM;;;;;AAKL,4BAAE,OAAO,CAAC,IAAI,EAAE,UAAS,IAAI,EAAE;;AAE7B,cAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EACtB,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE;;;AAGvB,oBAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;WACvC,MAAM;AACL,oBAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;WACrB;SACJ,EAAE,IAAI,CAAC,CAAC;;AAET,YAAI,GAAG,QAAQ,CAAC;;AAEhB,aAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;;AAEhD,cAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAC7B,IAAI,KAAK,KAAK,CAAC,EAAE;AACf,gBAAI,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KACxC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;WAC/B,MAAM;;AAEL,gBAAI,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;WAClD;SACJ;OACF;AACD,aAAO,MAAM,CAAC;KACf;;;;;;;;;WAME,eAAC,KAAK,EAAE;AACX,WAAK,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;AACvC,UAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,OAAO,KAAK,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,KACxD,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;KACtB;;;SA9EG,IAAI;;;qBAiFK,IAAI","file":"path.js","sourcesContent":["import _ from 'lodash';\nimport cldr from 'cldr';\n\n/**\n * This class converts the path to\n * an array or a dotted path\n * @class Path\n */\nclass Path {\n  constructor(path) {\n      // If the string contains favico.ico\n      // replace it with an empty string\n      this.path = path.replace('favicon.ico', '');\n    }\n    /** \n     * Determines if the string contains a locale\n     * @param  {String}  str The string to determine\n     * @return {Boolean}     Returns true if the string contains a locale.\n     */\n  isLocale(str) {\n      str = str.toLowerCase().replace('-', '_');\n      // Compare the locales against cldr\n      return _.contains(cldr.localeIds, str);\n    }\n    /** \n     * Converts the path into an array.\n     * @param  {String} path The path to convert\n     * @return {Array}      The array that represents the path.\n     */\n  toArray(path) {\n      path = path ? path.split('/') : this.path.split('/');\n      var filtered = [],\n        result = [];\n      var version = /\\d{1,2}(\\.)\\d{1,2}((\\.)\\d{1,2})?$/;\n      if (path.length < 3) {\n        // It's safe to say that path[0] will always be ''\n        // so add the second '' and define it as the index\n        if (path[1] === '') {\n          result.push('index');\n        } else {\n          // Make sure the path does not contain a locale\n          // and maybe something does exist besides ''? (precaution)\n          if (!this.isLocale(path[1])) result.push(path[1]);\n        }\n      } else {\n        // For every item in the path\n        // check to see if it contains a version or\n        // if it's a regular name, then add it to the \n        // filtered array\n        _.forEach(path, function(item) {\n          //Make sure the path does not contain a locale\n          if (!this.isLocale(item))\n            if (item.match(version)) {\n              // Prevent the version dots from being\n              // interpreted as a dot notation\n              filtered.push(item.replace('.', '*'));\n            } else {\n              filtered.push(item);\n            }\n        }, this);\n\n        path = filtered;\n        // Once we have filtered \n        for (var count = 1; count < path.length; count++) {\n          // Make sure the path does not contain a locale\n          if (!this.isLocale(path[count]))\n            if (count === 1) {\n              if (path[count] === '') result.push('index');\n              else result.push(path[count]);\n            } else {\n              // Make sure nothing else is empty\n              if (path[count] !== '') result.push(path[count]);\n            }\n        }\n      }\n      return result;\n    }\n    /** \n     * Converts an array to a dotted path\n     * @param  {Array} array The array that contains the path\n     * @return {String}       The dotted path\n     */\n  toDot(array) {\n    array = array ? array : this.toArray();\n    if (array.length > 1) return array.join().replace(/,/g, '.');\n    else return array[0];\n  }\n}\n\nexport default Path;"],"sourceRoot":"/source/"}