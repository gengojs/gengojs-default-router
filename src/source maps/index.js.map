{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Takeshi Iwana aka iwatakeshi\n * MIT 2015\n * Router\n * This module parses the routes\n * and sets the dot notation\n * according to the path.\n */\nimport _ from 'lodash';\nimport cldr from 'cldr';\nimport debug from 'gengojs-debug';\nvar log = debug('router');\n\nclass Path {\n  constructor(path) {\n      // If the string contains favico.ico\n      // replace it with an empty string\n      this.path = path.replace('favicon.ico', '');\n    }\n    /* Private: Checks if the string is a locale */\n  isLocale(str) {\n      str = str.toLowerCase().replace('-', '_');\n      // Compare the locales against cldr\n      return _.contains(cldr.localeIds, str);\n    }\n    /* Converts the path to an Array */\n  toArray(path) {\n    path = path ? path.split('/') : this.path.split('/');\n    var filtered = [],\n      result = [];\n    var version = /\\d{1,2}(\\.)\\d{1,2}((\\.)\\d{1,2})?$/;\n    if (path.length < 3) {\n      // It's safe to say that path[0] will always be ''\n      // so add the second '' and define it as the index\n      if (path[1] === '') {\n        result.push('index');\n      } else {\n        // Make sure the path does not contain a locale\n        // and maybe something does exist besides ''? (precaution)\n        if (!this.isLocale(path[1])) result.push(path[1]);\n      }\n    } else {\n      // For every item in the path\n      // check to see if it contains a version or\n      // if it's a regular name, then add it to the \n      // filtered array\n      _.forEach(path, function(item) {\n        //Make sure the path does not contain a locale\n        if (!this.isLocale(item))\n          if (item.match(version)) {\n            // Prevent the version dots from being\n            // interpreted as a dot notation\n            filtered.push(item.replace('.', '*'));\n          } else {\n            filtered.push(item);\n          }\n      }, this);\n\n      path = filtered;\n      // Once we have filtered \n      for (var count = 1; count < path.length; count++) {\n        // Make sure the path does not contain a locale\n        if (!this.isLocale(path[count]))\n          if (count === 1) {\n            if (path[count] === '') result.push('index');\n            else result.push(path[count]);\n          } else {\n            // Make sure nothing else is empty\n            if (path[count] !== '') result.push(path[count]);\n          }\n      }\n    }\n    return result;\n  }\n  toDot(array) {\n    array = array ? array : this.toArray();\n    if (array.length > 1) return array.join().replace(/,/g, '.');\n    else return array[0];\n  }\n}\n\nclass Router extends Path {\n  constructor(path, enabled) {\n    super(path);\n    this.enabled = enabled;\n  }\n  isEnabled() {\n    return this.enabled;\n  }\n}\n\nexport default () => {\n  'use strict';\n  return {\n    main: function ship(req) {\n      // Set options\n      var options = this.options.router;\n      // Expose internal API\n      this.router = new Router(req.path, options.enabled);\n      // Debug\n      if (this.router && options.enabled)\n        log.debug(\n          'path:', this.router.path,\n          'toArray:', this.router.toArray(),\n          'toDot:', this.router.toDot());\n    },\n    package: _.merge({\n      type: 'router'\n    }, require('../package')),\n    defaults: require('../defaults'),\n    // Export the class for\n    // test purposes\n    mock: Router\n  };\n};"],"sourceRoot":"/source/"}